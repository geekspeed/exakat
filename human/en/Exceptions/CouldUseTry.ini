name = "Could Use Try";
description = "Some commands may raise exceptions. It is recommended to use the try/catch block to intercept those exceptions, and process them.

* / : ``DivisionByZeroError``
* % : ``DivisionByZeroError``
* intdiv() : ``DivisionByZeroError``
* << : ``ArithmeticError``
* >> : ``ArithmeticError``
* Phar::mungserver : ``PharException``
* Phar::webphar : ``PharException``

See also `Predefined Exceptions <http://php.net/manual/en/reserved.exceptions.php>`_,
         `PharException <http://php.net/manual/en/class.pharexception.php>`_.
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "1.5.0";

modifications[] = "Add a try/catch clause around those commands"
modifications[] = "Add a check on the values used with those operator : for example, check a dividend is not 0, or a bitshift is not negative"

[example1]
project="Mautic"
file="app/bundles/StageBundle/Controller/StageController.php"
line="78"
code="        //set limits
        $limit = $this->get('session')->get(
            'mautic.stage.limit',
            $this->coreParametersHelper->getParameter('default_pagelimit')
        );
/... Code where $limit is read but not modified /
        $count = count($stages);
        if ($count && $count < ($start + 1)) {
            $lastPage = ($count === 1) ? 1 : (ceil($count / $limit)) ?: 1;
";
explain="$limit is read as a session variable or a default value. There are no check here that $limit is not null, before using it in a division. It is easy to imagine this is done elsewhere, yet a try/catch could help intercept unwanted situations."
